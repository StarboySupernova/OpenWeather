////  CustomTabBar.swift//  OpenWeather////  Created by Simbarashe Dombodzvuku on 4/19/25.//import Foundationimport SwiftUIimport UIKitstruct CustomTabBar: View {    @State var currentTab: CustomTab = .Home        init() {        UITabBar.appearance().isHidden = true    }        @Namespace var animation    //current tab xvalue    @State var currentXValue: CGFloat = 0        var body: some View {        TabView(selection: $currentTab) {            ContentView()                .tag(CustomTab.Home)        }        .overlay (            HStack(spacing: 0) {                ForEach(CustomTab.allCases, id: \.rawValue) { tab in                    TabButton(tab: tab)                }            }                .padding(.vertical)                .padding(.bottom, safeArea().bottom == 0 ? 10 : (safeArea().bottom - 10))                .background(                    MaterialEffect(style: .systemUltraThinMaterialDark)                        .clipShape(BottomCurve(currentXValue: currentXValue))                )            , alignment: .bottom        )        .ignoresSafeArea(.all, edges: .bottom)        .preferredColorScheme(.dark)    }        @ViewBuilder func TabButton(tab: CustomTab) -> some View {        GeometryReader { proxy in            Button {                withAnimation(.spring()) {                    currentTab = tab                    //updating value                    currentXValue = proxy.frame(in: .global).midX                }            } label: {                Image(systemName: tab.rawValue)                    .resizedToFit(width: 25, height: 25)                    .frame(maxWidth: .infinity)                    .foregroundColor(.white)                    .padding(currentTab == tab ? .large : 0)                    .background(                        ZStack {                            if currentTab == tab {                                MaterialEffect(style: .systemChromeMaterialDark)                                    .clipShape(Circle())                                    .matchedGeometryEffect(id: "TAB", in: animation)                            }                        }                    )                    .contentShape(Rectangle())                    .offset(y: currentTab == tab ? -50 : 0)            }            //setting initial curve position            .onAppear {                if tab == CustomTab.allCases.first && currentXValue == 0 {                    currentXValue = proxy.frame(in: .global).midX                }            }        }        .frame(height: 30)    }}@available(iOS 16.0, *)struct CustomTabBar_Previews: PreviewProvider  {    static var previews: some View {        CustomTabBar()    }}enum CustomTab: String, CaseIterable {    case Home = "house.fill"    case Forecast = "cloud.sun.bolt"}struct MaterialEffect: UIViewRepresentable {    var style: UIBlurEffect.Style        func makeUIView(context: Context) -> UIVisualEffectView {        let view = UIVisualEffectView(effect: UIBlurEffect(style: style))        return view    }        func updateUIView(_ uiView: UIVisualEffectView, context: Context) {            }}struct BottomCurve: Shape {    var currentXValue: CGFloat    //Animating Path    var animatableData: CGFloat {        get{currentXValue}        set{currentXValue = newValue}    }    func path(in rect: CGRect) -> Path {        return Path { path in            path.move(to: CGPoint(x: 0, y: 0))            path.addLine(to: CGPoint(x: rect.width, y: 0))            path.addLine(to: CGPoint(x: rect.width, y: rect.height))            path.addLine(to: CGPoint(x: 0, y: rect.height))                        //mid will be current xvalue            let mid = currentXValue            path.move(to: CGPoint(x: mid - 50, y: 0))                        let to1 = CGPoint(x: mid, y: 35)            let control1 = CGPoint(x: mid - 25, y: 0)            let control2 = CGPoint(x: mid - 25, y: 35)                        path.addCurve(to: to1, control1: control1, control2: control2)                        let to2 = CGPoint(x: mid + 50, y: 0)            let control3 = CGPoint(x: mid + 25, y: 35)            let control4 = CGPoint(x: mid + 25, y: 0)                        path.addCurve(to: to2, control1: control3, control2: control4)        }    }}var width = UIScreen.main.bounds.width